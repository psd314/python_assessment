Libraries used:
-pandas
-sqlite3
-csv
-pytest

Steps:
1. Create virtual environment for better project organization and to help avoid
   potential dependency issues with the base Python installation.
2. Download data file and extract csv from zip folder.
3. Read in csv file to populate database. I chose sqlite3 for this task due to
   it being natively supported by Python and provided by the standard library.
   It's quick setup also allows for fast implementation which was important since
   there was a deadline for the mini-project.
4. Set up folder structure and include __init__.py files to allow for separation of
   concerns in the project and provide relative imports among the modules.
5. Develop solutions with Test Driven Development in mind to  keep functions small 
   and manageable.  This is to facilitate testing side effects and state changes 
   more easily and reliably. Also focusing on writing tests along with the code to
   prevent the function becoming unruly and overly complicated.
6. Application testing.  Making sure the app runs manually as well as the project
   can be shared and set up by a different user.

Improvements:
- Better commenting.  Often there are a lot of steps going on under the hood when performing
operations on data.  It's not always obvious what the code is doing at first 
glance so I'd like to go back and highlight those areas to improving code readability.

- More robust unit testing.  Some of the tests have good representative assertion cases but
I'd like to add additional cases to better validate the results.

- Using MultiIndexing/Melt. I initially wanted to tackle the actor, director pair problem and suspected 
using MultiIndexing and/or column melting would be a good approach but I couldn't get it work. Instead I pivoted to
investigating average imdb score based on film genre.
